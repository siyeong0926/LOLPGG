// lol.service.ts
import { Injectable } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { lastValueFrom, Observable } from 'rxjs';
import { AxiosResponse } from 'axios';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class LolService {
  private apiKey: string;
  private baseUrl: string;

  constructor(
    private httpService: HttpService,
    private configService: ConfigService,
  ) {
    this.baseUrl = 'https://kr.api.riotgames.com'; // 기본 URL 설정 (리그 오브 레전드 API에 맞춰 설정)
    this.apiKey = this.configService.get<string>('RIOT_API_KEY'); // API 키 설정 (환경변수에서 가져오는 것을 권장)
  }

  async findSummonerByName(summonerName: string) {
    const apiKey = 'RGAPI-498a2eec-b082-4aa4-8e39-55ce06d5ced1';
    const region = 'kr'; // or any other region
    const url = `https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by-name/${encodeURI(
      summonerName,
    )}?api_key=${apiKey}`;

    const response$ = this.httpService.get(url);
    return lastValueFrom(response$).then((response) => response.data);
  }

  // 소환사 숙련도 가져오기
  getChampionMastery(summonerId: string): Observable<AxiosResponse<any>> {
    const url = `${this.baseUrl}/lol/champion-mastery/v4/champion-masteries/by-summoner/${summonerId}?api_key=${this.apiKey}`;
    return this.httpService.get(url);
  }

  // 소환사의 최근 게임 가져오기
  getRecentMatches(accountId: string): Observable<AxiosResponse<any>> {
    const url = `${this.baseUrl}/lol/match/v4/matchlists/by-account/${accountId}?endIndex=10&api_key=${this.apiKey}`;
    return this.httpService.get(url);
  }

  // 챔피언 목록 가져오기
  getChampions(): Observable<AxiosResponse<any>> {
    const url = `http://ddragon.leagueoflegends.com/cdn/12.5.1/data/en_US/champion.json`;
    return this.httpService.get(url);
  }

  // 소환사 ID를 사용하여 소환사의 리그 정보 (티어) 가져오기
  async getSummonerTier(summonerId: string) {
    const url = `${this.baseUrl}/lol/league/v4/entries/by-summoner/${summonerId}?api_key=${this.apiKey}`;

    try {
      const response = await lastValueFrom(this.httpService.get(url));
      return response.data;
    } catch (error) {
      // 에러 처리
      throw new Error('소환사의 리그 정보를 가져오는 데 실패했습니다.');
    }
  }
}
